pipeline {
    agent any
 
    // triggers {
    //     pollSCM '* * * * *'
    // }
    environment {
        // tag = sh(returnStdout: true, script: "git rev-parse --short=10 HEAD").trim()
        tag = sh(returnStdout: true, script: "git rev-parse HEAD").trim()
    }

    stages {
        stage('checkout') {
           steps {
             
            git credentialsId: 'Github', url: 'https://github.com/AkhilMovva/flask-mysql-app'
             
            }
        }
        
        stage('Clean docker containers'){
            steps{
                script{
                
                    def doc_containers = sh(returnStdout: true, script: 'docker container ps -aq').replaceAll("\n", " ") 
                    if (doc_containers) {
                        sh "docker stop ${doc_containers}"
                        sh "docker rm ${doc_containers}"
                        sh "docker image prune"
                    }
                    
                    
                    
                }
            }
        }
        
        stage('Docker Build and Tag') {
            steps {
              
                sh 'docker build -t akhilmovva/flask-image:latest -t akhilmovva/flask-image:${tag} .' 
                // sh 'docker tag flask-image akhilmovva/flask-image:${tag}'
                //sh 'docker tag flask-image akhilmovva/flask-image:$BUILD_NUMBER'
               
                }
        }
     
        // stage('Publish image to Docker Hub') {
          
        //     steps {
        //         withDockerRegistry([ credentialsId: "dockerHub", url: "" ]) {
        //         sh  'docker push akhilmovva/flask-image:${tag}'
        //         //  sh  'docker push flask-image/flask-image:$BUILD_NUMBER' 
        //         }
                  
        //     }
        // }
        
     
        // stage('Run Docker container on Jenkins Agent') {
             
        //     steps {
        //         sh "docker run -d -p 5000:5000 --name flask-app flask-image:${tag}"
        //     }
        // }
        
        // stage('Run Docker container on remote hosts') {
             
        //     steps {
        //         sh "ssh ubuntu@18.204.221.45 docker  run -d -p 5000:5000 --restart unless-stopped akhilmovva/flask-image:0.3"
 
        //     }
        // }
    }
 }